# -*- coding: utf-8 -*-
"""Script Dataset Jessica v24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uL9CZe6CtCA81RHPtMgGrNPeyoppx17E

# **Policy Tracker América Latina**

##1 - Importando pacotes
"""

import pandas as pd
import matplotlib.pyplot as plt

"""##2 - Extraindo dados

Tabela de medidas de contenção
"""

df_LAT = pd.read_csv('https://github.com/OxCGRT/covid-policy-tracker-legacy/blob/main/legacy_data_202207/OxCGRT_latest.csv?raw=true', low_memory = False)
df_LAT.head()

"""Pegando apenas dados a nível nacional"""

df_LAT = df_LAT[df_LAT['Jurisdiction' ]=='NAT_TOTAL']

"""Diabetes prevalence"""

df_diabetes = pd.read_excel('https://api.worldbank.org/v2/en/indicator/SH.STA.DIAB.ZS?downloadformat=excel', sheet_name="Data", header = 3)
df_diabetes.head(5)

df_diabetes = df_diabetes[['Country Name', 'Country Code', '2021']]
df_diabetes.rename(columns={str(2021):'Diabetes_Prevalence_2021'}, inplace=True)
df_diabetes.head(5)

"""Tabela trabalho informal"""

df_trabalho_informal = pd.read_excel('/content/TB_trabalho_informal.xlsx')
df_trabalho_informal.head(5)

df_trabalho_informal_ag = df_trabalho_informal[df_trabalho_informal['classif1.label']=='Economic activity (Agriculture, Non-Agriculture): Agriculture']
df_trabalho_informal_ag = df_trabalho_informal_ag[['ref_area.label', 'obs_value']]
df_trabalho_informal_ag.rename(columns={'obs_value':'pct_informal_ag_jobs'}, inplace=True)
df_trabalho_informal_nag = df_trabalho_informal[df_trabalho_informal['classif1.label']=='Economic activity (Agriculture, Non-Agriculture): Non-agriculture']
df_trabalho_informal_nag = df_trabalho_informal_nag[['ref_area.label', 'obs_value']]
df_trabalho_informal_nag.rename(columns={'obs_value':'pct_informal_n_ag_jobs'}, inplace=True)
df_trabalho_informal_tot = df_trabalho_informal[df_trabalho_informal['classif1.label']=='Economic activity (Agriculture, Non-Agriculture): Total']
df_trabalho_informal_tot = df_trabalho_informal_tot[['ref_area.label', 'obs_value']]
df_trabalho_informal_tot.rename(columns={'obs_value':'pct_informal_tot_jobs'}, inplace=True)
df_trabalho_informal_mod = pd.merge(df_trabalho_informal_ag, df_trabalho_informal_nag, on ='ref_area.label' , how='inner')
df_trabalho_informal_mod = pd.merge(df_trabalho_informal_mod, df_trabalho_informal_tot, on ='ref_area.label' , how='inner')
df_trabalho_informal_mod.head(5)

"""Tabela hospitais por 100 mil pessoas *****dados de 2013"""

df_hospital_density = pd.read_excel('/content/TB_hospital_per_hab.xlsx')
df_hospital_density_mod = df_hospital_density[['Location', 'SpatialDimValueCode', 'Period', 'Value', 'FactComments']]
df_hospital_density.head(5)

celula = df_hospital_density_mod.loc[df_hospital_density_mod['Location'] == 'Bolivia (Plurinational State of)'].index
#df_hospital_density_mod.at[celula[0], 'Location'] = 'Bolivia'
df_hospital_density_mod = df_hospital_density_mod[df_hospital_density_mod['Period']==2013]
df_hospital_density_mod.rename(columns={'Value':'Hospital_Density_Per_100k'}, inplace=True)
df_hospital_density_mod = df_hospital_density_mod[['Location', 'Hospital_Density_Per_100k' ]]
df_hospital_density_mod.tail(5)

"""Population density"""

df_density = pd.read_excel('https://api.worldbank.org/v2/en/indicator/EN.POP.DNST?downloadformat=excel', header = 3)
df_density_mod = df_density[['Country Name', 'Country Code', '2020']]
df_density_mod.rename(columns={str(2020):'Population Density'}, inplace=True)
df_density_mod.head(5)

"""Tabela household size"""

df_hhSize = pd.read_excel('/content/TB_hh_size.xlsx', sheet_name='HH size and composition 2022', header = 4)
df_hhSize.head(3)

from numpy import datetime64
df_hhSize['Reference date (dd/mm/yyyy)'] = df_hhSize['Reference date (dd/mm/yyyy)'].astype(datetime64)

idx = df_hhSize.groupby('Country or area')['Reference date (dd/mm/yyyy)'].idxmax()
df_hhSize = df_hhSize.loc[idx]
df_hhSize = df_hhSize[['Country or area','Average household size (number of members)']]
df_hhSize.head(5)

celula1_hh = df_hhSize.loc[df_hhSize['Country or area'] == 'Bolivia (Plurinational State of)'].index
df_hhSize[ df_hhSize['Country or area'] == 'Bolivia']
celula2_hh = df_hhSize.loc[df_hhSize['Country or area'] == 'Venezuela (Bolivarian Republic of)'].index
#df_hhSize.at[celula2_hh[0], 'Country or area'] = 'Venezuela'

"""Tabela de IDH"""

df_IDH = pd.read_csv('https://hdr.undp.org/sites/default/files/2021-22_HDR/HDR21-22_Composite_indices_complete_time_series.csv', sep=',')

"""Deu erro ao tentar puxar usando o pd.read_csv. Abaixo outro jeito de puxar:"""

url = "https://hdr.undp.org/sites/default/files/2021-22_HDR/HDR21-22_Composite_indices_complete_time_series.csv"
storage_options = {'User-Agent': 'Mozilla/5.0'}
df_IDH = pd.read_csv(url, storage_options=storage_options)

"""Tabela de indice de gini"""

df_Gini= pd.read_excel('https://api.worldbank.org/v2/en/indicator/SI.POV.GINI?downloadformat=excel', header=3)
df_Gini = df_Gini[df_Gini['Indicator Name']=='Gini index']
#fazer um for
df_Gini.rename(columns=({'2020': 'Gini_2020','2021': 'Gini_2021', '2022': 'Gini_2022'}), inplace=True)
df_Gini.head()

"""Tabela PIB per capita"""

df_PIB= pd.read_excel('https://api.worldbank.org/v2/en/indicator/NY.GDP.PCAP.CD?downloadformat=excel', header=3)
df_PIB= df_PIB[df_PIB['Indicator Name']=='GDP per capita (current US$)']
#fazer um for aqui também
df_PIB.rename(columns=({'2020': 'PIB_2020','2021': 'PIB_2021'}), inplace=True)
df_PIB.head()

"""Redimensionando as tabelas com indicadores socioeconomicos"""

#2020
df_socio_economic_2020 = pd.merge(df_IDH[['iso3', 'hdi_2020', 'le_2020',  'eys_2020', 'mys_2020', 'gnipc_2020']], df_PIB[['Country Code','PIB_2020']], left_on=['iso3'], right_on =['Country Code'], how='outer')
df_socio_economic_2020 = pd.merge(df_socio_economic_2020, df_Gini[['Country Name', 'Country Code','Gini_2020']], left_on=['Country Code'], right_on =['Country Code'], how='left')
df_socio_economic_2020['Country Name'] = df_socio_economic_2020.apply(lambda x: 'Venezuela' if x['Country Name'] == 'Venezuela, RB' else x['Country Name'], axis=1)  #Corrigindo nome da Venezuela
df_socio_economic_2020.drop(["iso3"], axis=1, inplace=True)
df_socio_economic_2020['Year'] = 2020
#df_socio_economic_2020['Ind'] = df_socio_economic_2020.index  + 276**1


#2021
df_socio_economic_2021 = pd.merge(df_IDH[['iso3', 'hdi_2021', 'le_2021',  'eys_2021', 'mys_2021', 'gnipc_2021']], df_PIB[['Country Code', 'PIB_2021']], left_on=['iso3'], right_on =['Country Code'], how='outer')
df_socio_economic_2021 = pd.merge(df_socio_economic_2021, df_Gini[['Country Name', 'Country Code','Gini_2021']], left_on=['Country Code'], right_on =['Country Code'], how='left')
df_socio_economic_2021['Country Name'] = df_socio_economic_2021.apply(lambda x: 'Venezuela' if x['Country Name'] == 'Venezuela, RB' else x['Country Name'], axis=1)  #Corrigindo nome da Venezuela
df_socio_economic_2021.drop(["iso3"], axis=1, inplace=True)
df_socio_economic_2021['Year'] = 2021
#df_socio_economic_2021['Ind'] = df_socio_economic_2021.index  + 276**2
df_socio_economic_2021.head()

df_socio_economic_2020.rename(columns=({'hdi_2020': 'hdi','le_2020': 'le','eys_2020': 'eys', 'mys_2020': 'mys', 'gnipc_2020': 'gnipc','PIB_2020': 'PIB', 'Gini_2020': 'Gini'}), inplace=True)
df_socio_economic_2021.rename(columns=({'hdi_2021': 'hdi','le_2021': 'le','eys_2021': 'eys', 'mys_2021': 'mys', 'gnipc_2021': 'gnipc','PIB_2021': 'PIB', 'Gini_2021': 'Gini'}), inplace=True)

df_socio_economic_2021.columns

#juntando anos
df_socio_economic = pd.concat([df_socio_economic_2020, df_socio_economic_2021], axis=0)
df_socio_economic.head()

"""Tabela de Vacinação"""

df_Vacinacao = pd.read_csv("https://covid.ourworldindata.org/data/owid-covid-data.csv", sep=',')
df_Vacinacao.info()

"""Redimensionando Tabela de vacinação"""

df_Vacinacao_mod = df_Vacinacao[['date', 'location', 'new_cases','total_tests','new_deaths','new_tests','median_age','aged_65_older','aged_70_older','population','human_development_index','life_expectancy','gdp_per_capita','extreme_poverty','hospital_beds_per_thousand','total_vaccinations', 'people_vaccinated' , 'people_fully_vaccinated', 'total_boosters','new_vaccinations','new_vaccinations_smoothed','total_vaccinations_per_hundred', 'people_vaccinated_per_hundred', 'total_boosters_per_hundred', 'new_vaccinations_smoothed_per_million', 'new_people_vaccinated_smoothed_per_hundred' ]]
#Mudando nome da coluna pra ficar igual a tabela de oxford
df_Vacinacao_mod.rename(columns={'date': 'Date'}, inplace = True)
df_Vacinacao_mod.head()

"""Tabela mobilidade"""

df_mobility = pd.read_csv("https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv", sep=',')
df_mobility[df_mobility['country_region']=='Venezuela']

"""Redimensionando a tabela de mobilidade"""

df_mobility_mod = df_mobility[['date', 'country_region', 'sub_region_1', 'metro_area', 'retail_and_recreation_percent_change_from_baseline' , 'grocery_and_pharmacy_percent_change_from_baseline', 'parks_percent_change_from_baseline','transit_stations_percent_change_from_baseline','workplaces_percent_change_from_baseline','residential_percent_change_from_baseline' ]]
#Mudando nome da coluna pra ficar igual a tabela de oxford
df_mobility_mod.rename(columns={'date': 'Date'}, inplace = True)
df_mobility_mod.head()

"""##3 - Filtrando dados

Seleção de países
"""

lista_completa_de_paises = [
      'Argentina',
			'Bolivia'  ,
			'Brazil'  ,
			'Chile',
			'Colombia',
			'Costa Rica',
			'Cuba',
			'Ecuador',
			'El Salvador',
			'Guatemala',
			'Haiti',
			'Honduras',
			'Mexico',
			'Nicaragua',
			'Panama',
			'Paraguay',
			'Peru',
			'Dominican Republic',
			'Uruguay',
			'Venezuela']
df_LAT = df_LAT[df_LAT['CountryName'].isin(lista_completa_de_paises)].reset_index(drop = True)
df_Vacinacao_mod = df_Vacinacao_mod[df_Vacinacao_mod['location'].isin(lista_completa_de_paises)].reset_index(drop = True)
df_socio_economic = df_socio_economic[df_socio_economic['Country Name'].isin(lista_completa_de_paises)].reset_index(drop = True)

df_Vacinacao_mod.head()

"""##4 - Tratando dados

Transformando a data em formato datetime
"""

from datetime import datetime as dt


df_LAT.Date = df_LAT.Date.map(str) # primeiro transformando os dados em string
df_LAT.Date = pd.to_datetime(df_LAT.Date)  # depois transformando em date

df_mobility_mod.Date = df_mobility_mod.Date.map(str)
df_mobility_mod.Date = pd.to_datetime(df_mobility_mod.Date)

df_Vacinacao_mod.Date = df_Vacinacao_mod.Date.map(str)
df_Vacinacao_mod.Date = pd.to_datetime(df_Vacinacao_mod.Date)


df_Vacinacao_mod.info

"""Criado a coluna que indica o dia do ano"""

df_LAT['Day']= df_LAT.Date.dt.day_of_year #Aproveitando para criar a coluna dia do ano
df_LAT['Year']= df_LAT.Date.dt.year   #Aproveitando para criar a coluna dia do ano

df_LAT.columns

"""Agora Fazendo a Média Móvel do número de casos confirmados e número de mortos para cada pais

Primeiro separa-se os paises em dataframes para fazer a média móvel semanal em cada um desses dataframes
"""

df_Vacinacao_mod_Brazil             = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Brazil'].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Argentina         = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Argentina'     ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Bolivia			     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Bolivia'       ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Chile             = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Chile'         ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Colombia          = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Colombia'      ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_CostaRica         = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Costa Rica'    ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Cuba					     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Cuba'          ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Ecuador				   = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Ecuador'       ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_ElSalvador        = df_Vacinacao_mod[df_Vacinacao_mod.location == 'El Salvador'   ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Guatemala	  		 = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Guatemala'     ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Haiti				     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Haiti'			].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Honduras				   = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Honduras'      ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Mexico				     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Mexico'        ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Nicaragua			   = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Nicaragua'     ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Panama				     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Panama'        ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Paraguay				   = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Paraguay'      ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Peru					     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Peru'          ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_DominicanRepublic = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Dominican Republic'    ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Uruguay           = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Uruguay'       ].set_index('Date').sort_index().fillna(0)
df_Vacinacao_mod_Venezuela		     = df_Vacinacao_mod[df_Vacinacao_mod.location == 'Venezuela'     ].set_index('Date').sort_index().fillna(0)

"""Fazendo o cálculo da média móvel"""

df_Vacinacao_mod_Argentina['new_deaths_mm7']             = df_Vacinacao_mod_Argentina['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Bolivia['new_deaths_mm7']			    = df_Vacinacao_mod_Bolivia['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Brazil['new_deaths_mm7']                = df_Vacinacao_mod_Brazil['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Chile['new_deaths_mm7']                 = df_Vacinacao_mod_Chile['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Colombia['new_deaths_mm7']              = df_Vacinacao_mod_Colombia['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_CostaRica['new_deaths_mm7']            = df_Vacinacao_mod_CostaRica['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Cuba['new_deaths_mm7']					= df_Vacinacao_mod_Cuba['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Ecuador['new_deaths_mm7']				= df_Vacinacao_mod_Ecuador['new_deaths' ].rolling(window = 7).mean()
df_Vacinacao_mod_ElSalvador['new_deaths_mm7']           = df_Vacinacao_mod_ElSalvador['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Guatemala['new_deaths_mm7']			    = df_Vacinacao_mod_Guatemala['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Haiti['new_deaths_mm7']				    = df_Vacinacao_mod_Haiti['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Honduras['new_deaths_mm7']				= df_Vacinacao_mod_Honduras['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Mexico['new_deaths_mm7']				= df_Vacinacao_mod_Mexico['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Nicaragua['new_deaths_mm7']			    = df_Vacinacao_mod_Nicaragua['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Panama['new_deaths_mm7']				= df_Vacinacao_mod_Panama['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Paraguay['new_deaths_mm7']			    = df_Vacinacao_mod_Paraguay['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Peru['new_deaths_mm7']				    = df_Vacinacao_mod_Peru['new_deaths' ].rolling(window = 7).mean()
df_Vacinacao_mod_DominicanRepublic['new_deaths_mm7']    = df_Vacinacao_mod_DominicanRepublic['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Uruguay['new_deaths_mm7']               = df_Vacinacao_mod_Uruguay['new_deaths'].rolling(window = 7).mean()
df_Vacinacao_mod_Venezuela['new_deaths_mm7']		        = df_Vacinacao_mod_Venezuela['new_deaths'].rolling(window = 7).mean()

df_Vacinacao_mod_Argentina['new_cases_mm7']             = df_Vacinacao_mod_Argentina['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Bolivia['new_cases_mm7']			    = df_Vacinacao_mod_Bolivia['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Brazil['new_cases_mm7']                = df_Vacinacao_mod_Brazil['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Chile['new_cases_mm7']                 = df_Vacinacao_mod_Chile['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Colombia['new_cases_mm7']              = df_Vacinacao_mod_Colombia['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_CostaRica['new_cases_mm7']            = df_Vacinacao_mod_CostaRica['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Cuba['new_cases_mm7']					= df_Vacinacao_mod_Cuba['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Ecuador['new_cases_mm7']				= df_Vacinacao_mod_Ecuador['new_cases' ].rolling(window = 7).mean()
df_Vacinacao_mod_ElSalvador['new_cases_mm7']           = df_Vacinacao_mod_ElSalvador['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Guatemala['new_cases_mm7']			    = df_Vacinacao_mod_Guatemala['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Haiti['new_cases_mm7']				    = df_Vacinacao_mod_Haiti['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Honduras['new_cases_mm7']				= df_Vacinacao_mod_Honduras['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Mexico['new_cases_mm7']				= df_Vacinacao_mod_Mexico['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Nicaragua['new_cases_mm7']			    = df_Vacinacao_mod_Nicaragua['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Panama['new_cases_mm7']				= df_Vacinacao_mod_Panama['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Paraguay['new_cases_mm7']			    = df_Vacinacao_mod_Paraguay['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Peru['new_cases_mm7']				    = df_Vacinacao_mod_Peru['new_cases' ].rolling(window = 7).mean()
df_Vacinacao_mod_DominicanRepublic['new_cases_mm7']    = df_Vacinacao_mod_DominicanRepublic['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Uruguay['new_cases_mm7']               = df_Vacinacao_mod_Uruguay['new_cases'].rolling(window = 7).mean()
df_Vacinacao_mod_Venezuela['new_cases_mm7']		        = df_Vacinacao_mod_Venezuela['new_cases'].rolling(window = 7).mean()

"""Tratando as tabelas de mobilidade para cada país"""

df_Mob_Argentina = df_mobility_mod[df_mobility.country_region == 'Argentina' ]
df_Mob_Brazil = df_mobility_mod[df_mobility.country_region == 'Brazil' ]
df_Mob_Bolivia = df_mobility_mod[df_mobility.country_region == 'Bolivia' ]
df_Mob_Chile = df_mobility_mod[df_mobility.country_region == 'Chile' ]
df_Mob_Colombia = df_mobility_mod[df_mobility.country_region == 'Colombia' ]
df_Mob_CostaRica = df_mobility_mod[df_mobility.country_region == 'Costa Rica' ]
df_Mob_Cuba = df_mobility_mod[df_mobility.country_region == 'Cuba' ]
df_Mob_Ecuador = df_mobility_mod[df_mobility.country_region == 'Ecuador' ]
df_Mob_ElSalvador = df_mobility_mod[df_mobility.country_region == 'El Salvador' ]
df_Mob_Guatemala = df_mobility_mod[df_mobility.country_region == 'Guatemala' ]
df_Mob_Haiti = df_mobility_mod[df_mobility.country_region == 'Haiti' ]
df_Mob_Honduras = df_mobility_mod[df_mobility.country_region == 'Honduras' ]
df_Mob_Mexico = df_mobility_mod[df_mobility.country_region == 'Mexico' ]
df_Mob_Nicaragua = df_mobility_mod[df_mobility.country_region == 'Nicaragua' ]
df_Mob_Panama = df_mobility_mod[df_mobility.country_region == 'Panama' ]
df_Mob_Paraguay = df_mobility_mod[df_mobility.country_region == 'Paraguay' ]
df_Mob_Peru = df_mobility_mod[df_mobility.country_region == 'Peru' ]
df_Mob_DominicanRepublic = df_mobility_mod[df_mobility.country_region == 'Dominican Republic' ]
df_Mob_Uruguay = df_mobility_mod[df_mobility.country_region == 'Uruguay' ]
df_Mob_Venezuela = df_mobility_mod[df_mobility.country_region == 'Venezuela' ]

df_Mob_Venezuela.info()

"""Colocando apenas as informações referentes ao país e tirando as informações que se referem a regiões daquele país"""

df_Mob_Argentina = df_Mob_Argentina[df_Mob_Argentina['sub_region_1'].isna() ]
df_Mob_Bolivia = df_Mob_Bolivia[df_Mob_Bolivia['sub_region_1'].isna() ]
df_Mob_Brazil = df_Mob_Brazil[df_Mob_Brazil['sub_region_1'].isna() ]
df_Mob_Chile = df_Mob_Chile[df_Mob_Chile['sub_region_1'].isna() ]
df_Mob_Colombia = df_Mob_Colombia[df_Mob_Colombia['sub_region_1'].isna()]
df_Mob_CostaRica = df_Mob_CostaRica[df_Mob_CostaRica['sub_region_1'].isna() ]
df_Mob_Cuba = df_Mob_Cuba[df_Mob_Cuba['sub_region_1'].isna()]
df_Mob_Ecuador = df_Mob_Ecuador[df_Mob_Ecuador['sub_region_1'].isna() ]
df_Mob_ElSalvador = df_Mob_ElSalvador[df_Mob_ElSalvador['sub_region_1'].isna() ]
df_Mob_Guatemala = df_Mob_Guatemala[df_Mob_Guatemala['sub_region_1'].isna() ]
df_Mob_Haiti = df_Mob_Haiti[df_Mob_Haiti['sub_region_1'].isna() ]
df_Mob_Honduras = df_Mob_Honduras[df_Mob_Honduras['sub_region_1'].isna() ]
df_Mob_Mexico = df_Mob_Mexico[df_Mob_Mexico['sub_region_1'].isna()]
df_Mob_Nicaragua = df_Mob_Nicaragua[df_Mob_Nicaragua['sub_region_1'].isna() ]
df_Mob_Panama = df_Mob_Panama[df_Mob_Panama['sub_region_1'].isna() ]
df_Mob_Paraguay = df_Mob_Paraguay[df_Mob_Paraguay['sub_region_1'].isna() ]
df_Mob_Peru = df_Mob_Peru[df_Mob_Peru['sub_region_1'].isna() ]
df_Mob_DominicanRepublic = df_Mob_DominicanRepublic[df_Mob_DominicanRepublic['sub_region_1'].isna() ]
df_Mob_Uruguay = df_Mob_Uruguay[df_Mob_Uruguay['sub_region_1'].isna() ]
df_Mob_Venezuela = df_Mob_Venezuela[df_Mob_Venezuela['sub_region_1'].isna()]

df_Mob_Haiti = df_Mob_Haiti[df_Mob_Haiti['metro_area'].isna() ]
df_Mob_Nicaragua = df_Mob_Nicaragua[df_Mob_Nicaragua['metro_area'].isna() ]
df_Mob_Panama = df_Mob_Panama[df_Mob_Panama['metro_area'].isna() ]
df_Mob_Uruguay = df_Mob_Uruguay[df_Mob_Uruguay['metro_area'].isna() ]

df_Vacinacao_mod_Argentina = pd.merge(df_Vacinacao_mod_Argentina,df_Mob_Argentina, on='Date',how='left')
df_Vacinacao_mod_Argentina.head()

"""Juntando dados de mobilidade com os dados de contenção para cada país"""

df_Vacinacao_mod_Brazil = pd.merge(df_Vacinacao_mod_Brazil,df_Mob_Brazil, on='Date',how='left')
df_Vacinacao_mod_Bolivia = pd.merge(df_Vacinacao_mod_Bolivia,df_Mob_Bolivia, on='Date',how='left')
df_Vacinacao_mod_Chile = pd.merge(df_Vacinacao_mod_Chile,df_Mob_Chile, on='Date',how='left')
df_Vacinacao_mod_Colombia = pd.merge(df_Vacinacao_mod_Colombia,df_Mob_Colombia, on='Date',how='left')
df_Vacinacao_mod_CostaRica = pd.merge(df_Vacinacao_mod_CostaRica,df_Mob_CostaRica, on='Date',how='left')
df_Vacinacao_mod_Cuba = pd.merge(df_Vacinacao_mod_Cuba,df_Mob_Cuba, on='Date',how='left')
df_Vacinacao_mod_Ecuador = pd.merge(df_Vacinacao_mod_Ecuador,df_Mob_Ecuador, on='Date',how='left')
df_Vacinacao_mod_ElSalvador = pd.merge(df_Vacinacao_mod_ElSalvador,df_Mob_ElSalvador, on='Date',how='left')
df_Vacinacao_mod_Guatemala = pd.merge(df_Vacinacao_mod_Guatemala,df_Mob_Guatemala, on='Date',how='left')
df_Vacinacao_mod_Haiti = pd.merge(df_Vacinacao_mod_Haiti,df_Mob_Haiti, on='Date',how='left')
df_Vacinacao_mod_Honduras = pd.merge(df_Vacinacao_mod_Honduras,df_Mob_Honduras, on='Date',how='left')
df_Vacinacao_mod_Mexico = pd.merge(df_Vacinacao_mod_Mexico,df_Mob_Mexico, on='Date',how='left')
df_Vacinacao_mod_Nicaragua = pd.merge(df_Vacinacao_mod_Nicaragua,df_Mob_Nicaragua, on='Date',how='left')
df_Vacinacao_mod_Panama = pd.merge(df_Vacinacao_mod_Panama,df_Mob_Panama, on='Date',how='left')
df_Vacinacao_mod_Paraguay = pd.merge(df_Vacinacao_mod_Paraguay,df_Mob_Paraguay, on='Date',how='left')
df_Vacinacao_mod_Peru = pd.merge(df_Vacinacao_mod_Peru,df_Mob_Peru, on='Date',how='left')
df_Vacinacao_mod_DominicanRepublic = pd.merge(df_Vacinacao_mod_DominicanRepublic,df_Mob_DominicanRepublic, on='Date',how='left')
df_Vacinacao_mod_Uruguay = pd.merge(df_Vacinacao_mod_Uruguay,df_Mob_Uruguay, on='Date',how='left')
df_Vacinacao_mod_Venezuela = pd.merge(df_Vacinacao_mod_Venezuela,df_Mob_Venezuela, on='Date',how='left')

df_Vacinacao_mod.columns

"""Juntando as bases novamente"""

df_LAT_fim0 = pd.concat([df_Vacinacao_mod_Argentina,df_Vacinacao_mod_Bolivia,df_Vacinacao_mod_Brazil,df_Vacinacao_mod_Chile,df_Vacinacao_mod_Colombia,df_Vacinacao_mod_CostaRica,df_Vacinacao_mod_Cuba,df_Vacinacao_mod_Ecuador,df_Vacinacao_mod_ElSalvador,df_Vacinacao_mod_Guatemala])

df_LAT_fim0.columns

df_LAT_fim = pd.concat([df_LAT_fim0, df_Vacinacao_mod_Haiti,df_Vacinacao_mod_Honduras,df_Vacinacao_mod_Mexico,df_Vacinacao_mod_Nicaragua,df_Vacinacao_mod_Panama,df_Vacinacao_mod_Paraguay,df_Vacinacao_mod_Peru,df_Vacinacao_mod_DominicanRepublic,df_Vacinacao_mod_Uruguay,df_Vacinacao_mod_Venezuela])

df_LAT.columns

df_LAT_final = pd.merge(df_LAT_fim, df_LAT, left_on=['Date', 'location'], right_on=['Date', 'CountryName'], how='right')

df_LAT_final.columns

"""Dataset final"""

df_socio_economic['Year'].astype(int)
#df_socio_economic['Year'] = df_socio_economic.to_numeric(df_socio_economic['Year'], errors = 'coerce')
df_socio_economic.info()

df_LAT_final.Year

df_LAT_final = pd.merge(df_LAT_final,df_socio_economic, left_on=['Year', 'CountryCode'], right_on=['Year','Country Code'],how='left')

df_LAT_final.reset_index()

df_LAT_final.columns

"""Eliminando colunas que não se fazem mais necessárias"""

df_LAT_final.drop([ "human_development_index", "location","Country Name", "Country Code"], axis=1, inplace=True)

df_LAT_final.drop([ "life_expectancy"], axis=1, inplace=True)

"""Fazendo merge com outras tabelas"""

df_LAT_final = pd.merge(df_LAT_final,df_diabetes, left_on=['CountryCode'], right_on=['Country Code'],how='left')
df_LAT_final = pd.merge(df_LAT_final,df_trabalho_informal_mod, left_on=['CountryName'], right_on=['ref_area.label'],how='left')
df_LAT_final = pd.merge(df_LAT_final,df_density_mod, left_on=['CountryCode'], right_on=['Country Code'],how='left')
df_LAT_final = pd.merge(df_LAT_final,df_hhSize, left_on=['CountryName'], right_on=['Country or area'],how='left')
df_LAT_final = pd.merge(df_LAT_final,df_hospital_density_mod, left_on=['CountryName'], right_on=['Location'],how='left')

print(df_LAT_final.columns)

df_LAT_final.drop(['Location','Country or area','Country Name_y','ref_area.label','Country Code_y','Country Code_x', 'Country Name_x'], axis=1, inplace=True)

df_LAT_final.info()

"""Exportando o dataset final como arquivo csv"""

df_LAT_final.info()

"""Rearranjando as colunas só pra ficar bonitinho"""

nova_ordem_colunas=['Date', 'CountryName', 'CountryCode', 'RegionName', 'RegionCode', 'Jurisdiction', 'C1_School closing', 'C1_Flag', 'C2_Workplace closing', 'C2_Flag', 'C3_Cancel public events', 'C3_Flag', 'C4_Restrictions on gatherings', 'C4_Flag', 'C5_Close public transport', 'C5_Flag', 'C6_Stay at home requirements', 'C6_Flag', 'C7_Restrictions on internal movement', 'C7_Flag', 'C8_International travel controls', 'E1_Income support', 'E1_Flag', 'E2_Debt/contract relief', 'E3_Fiscal measures', 'E4_International support', 'H1_Public information campaigns', 'H1_Flag', 'H2_Testing policy', 'H3_Contact tracing', 'H4_Emergency investment in healthcare', 'H5_Investment in vaccines', 'H6_Facial Coverings', 'H6_Flag', 'H7_Vaccination policy', 'H7_Flag', 'H8_Protection of elderly people', 'H8_Flag', 'M1_Wildcard', 'V1_Vaccine Prioritisation (summary)', 'V2A_Vaccine Availability (summary)', 'V2B_Vaccine age eligibility/availability age floor (general population summary)', 'V2C_Vaccine age eligibility/availability age floor (at risk summary)', 'V2D_Medically/ clinically vulnerable (Non-elderly)', 'V2E_Education', 'V2F_Frontline workers  (non healthcare)', 'V2G_Frontline workers  (healthcare)', 'V3_Vaccine Financial Support (summary)', 'V4_Mandatory Vaccination (summary)', 'ConfirmedCases', 'ConfirmedDeaths', 'StringencyIndex', 'StringencyIndexForDisplay', 'StringencyLegacyIndex', 'StringencyLegacyIndexForDisplay', 'GovernmentResponseIndex', 'GovernmentResponseIndexForDisplay', 'ContainmentHealthIndex', 'ContainmentHealthIndexForDisplay', 'EconomicSupportIndex', 'EconomicSupportIndexForDisplay', 'Day', 'retail_and_recreation_percent_change_from_baseline', 'grocery_and_pharmacy_percent_change_from_baseline', 'parks_percent_change_from_baseline', 'transit_stations_percent_change_from_baseline', 'workplaces_percent_change_from_baseline', 'residential_percent_change_from_baseline', 'total_vaccinations', 'people_vaccinated', 'people_fully_vaccinated', 'total_boosters', 'new_vaccinations', 'new_vaccinations_smoothed', 'total_vaccinations_per_hundred', 'people_vaccinated_per_hundred', 'total_boosters_per_hundred', 'new_vaccinations_smoothed_per_million', 'new_people_vaccinated_smoothed_per_hundred', 'new_cases', 'total_tests', 'new_deaths', 'new_tests', 'median_age', 'aged_65_older', 'aged_70_older', 'population', 'gdp_per_capita', 'extreme_poverty', 'hospital_beds_per_thousand', 'new_deaths_mm7', 'new_cases_mm7', 'country_region', 'sub_region_1', 'metro_area', 'Year', 'hdi', 'le', 'eys', 'mys', 'gnipc', 'PIB', 'Gini', 'Diabetes_Prevalence_2021', 'pct_informal_ag_jobs', 'pct_informal_n_ag_jobs', 'pct_informal_tot_jobs', 'Population Density', 'Average household size (number of members)', 'Hospital_Density_Per_100k']
df_LAT_final = df_LAT_final.loc[:, nova_ordem_colunas]

"""Povoando valores faltantes hdi, mys, gini"""

df_val_fat = pd.read_excel('/content/povoando dados socioec.xlsx', header=0)

# Realizar a junção (merge) dos datasets com base nas colunas de país e ano
df_LAT_final = pd.merge(df_LAT_final, df_val_fat, left_on=['CountryName', 'Year'],right_on=['CountryName', 'Ano'], how="left")

# Remover a coluna de hdi_x do df_LAT_final, que contém os valores faltantes
df_LAT_final.drop(["hdi_x","mys_x","Gini_x","Ano"], axis=1, inplace=True)

# Renomear a coluna de hdi_y para hdi, que contém os valores completos do df_val_fat
df_LAT_final.rename(columns={"hdi_y": "hdi"}, inplace=True)
df_LAT_final.rename(columns={"mys_y": "mys"}, inplace=True)
df_LAT_final.rename(columns={"Gini_y": "gini"}, inplace=True)

# Resetar os índices do df_LAT_final
df_LAT_final.reset_index(drop=True, inplace=True)

df_LAT_final[df_LAT_final['Ano']==2022]

df_LAT_final.to_excel("Dataset Jessica v23.xlsx")